openapi: 3.0.0
info:
  title: Merged API
  version: 1.0.0
paths:
  /social/post/{postId}/like:
    get:
      tags:
        - repo-social
      summary: Get the likes of a post
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Likes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repo_social_UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: User blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
    post:
      tags:
        - repo-social
      summary: Like a post
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Like created
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: User blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
    delete:
      summary: Deletes the like of a post
      tags:
        - repo-social
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Like deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: Like not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /social/user/{userId}/block:
    post:
      tags:
        - repo-social
      summary: Blocks another user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Block created
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
    delete:
      tags:
        - repo-social
      summary: Unblocks another user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Block deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: Not blocked this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /social/user/{userId}/blocked:
    get:
      tags:
        - repo-social
      summary: Get the users blocked by a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Users blocked retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repo_social_UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: Forbidden - can only see own blocked list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /social/user/{userId}/blockedBy:
    get:
      tags:
        - repo-social
      summary: Get the users who blocked a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Users who blocked retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repo_social_UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: Forbidden - can only see own blocked-by list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /social/user/{userId}/follow:
    post:
      tags:
      - repo-social
      summary: Follows another user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Follow created
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: User blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
    delete:
      tags:
      - repo-social
      summary: Unfollows another user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Follow deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: Not following this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /social/user/{userId}/follower:
    get:
      tags:
      - repo-social
      summary: Get the followers of a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Followers retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repo_social_UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: User blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /social/user/{userId}/following:
    get:
      tags:
      - repo-social
      summary: Get the users followed by a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Users followed retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repo_social_UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: User blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /social/user/{userId}/like:
    get:
      tags:
      - repo-social
      summary: Get the posts liked by a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Posts liked retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repo_social_PostResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '403':
          description: User blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
        '500':
          description: Error during the cypher script execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_social_RepoSocialErrorCode'
  /login:
    post:
      tags:
        - repo-user
      summary: Login user credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repo_user_LoginRequest'
        required: true
      responses:
        '200':
          description: User JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_UserEntity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
  /user:
    get:
      tags:
        - repo-user
      summary: Get my user's account
      responses:
        '200':
          description: Current user account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_UserEntity'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
    put:
      tags:
        - repo-user
      summary: Modify my user's account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repo_user_ModifyUserRequest'
        required: true
      responses:
        '200':
          description: User account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_UserEntity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
    post:
      tags:
        - repo-user
      summary: Create a new user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repo_user_CreateUserRequest'
        required: true
      responses:
        '200':
          description: User account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_UserEntity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
    delete:
      tags:
        - repo-user
      summary: Delete my user's account
      responses:
        '204':
          description: User account deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
  /user/image:
    put:
      tags:
        - repo-user
      summary: Upload Profile image for my user's account
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/repo_user_UploadImageRequest'
        required: true
      responses:
        '200':
          description: User account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_UserEntity'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
  /user/{id}:
    get:
      tags:
        - repo-user
      summary: Get a specific user's account
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_UserEntity'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_user_RepoUserErrorCode'
  /post:
    post:
      tags:
      - repo-post
      summary: Create a new post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/repo_post_CreatePostRequest'
        required: true
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_post_PostEntity'
        '400':
          description: Invalid input
        '401':
          description: User not authorized
        '404':
          description: User Not Found
  /post/{id}:
    get:
      tags:
      - repo-post
      summary: Get a specific post
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_post_PostEntity'
        '400':
          description: Invalid input
        '404':
          description: Post Not Found
    put:
      tags:
      - repo-post
      summary: Edit a post
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/repo_post_EditPostRequest'
        required: true
      responses:
        '200':
          description: Post edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_post_PostEntity'
        '400':
          description: Invalid input
        '401':
          description: User not authorized to modify Post
        '404':
          description: Post or User Not Found
    delete:
      tags:
      - repo-post
      summary: Delete a post
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_post_PostEntity'
        '400':
          description: Invalid input
        '401':
          description: User not authorized to delete
        '404':
          description: User Not Found
  /post/{id}/reply:
    get:
      tags:
      - repo-post
      summary: Get all replies for a post
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_post_PostEntity'
        '400':
          description: Invalid input
        '401':
          description: User not authorized
        '404':
          description: User Not Found
    post:
      tags:
      - repo-post
      summary: Reply to a post
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/repo_post_PostReplyRequest'
        required: true
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repo_post_PostEntity'
        '400':
          description: Invalid input
        '401':
          description: User not authorized
        '404':
          description: User Not Found
  /search:
    get:
      tags:
        - srvc-search
      summary: Search for posts
      parameters:
        - name: query
          in: query
          description: Search query string
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Posts found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/srvc_search_SearchEntity'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /home-timeline/{id}:
    get:
      tags:
      - srvc-home-timeline
      summary: extract the home feed
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Get a list of posts related to a specific user's follows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/srvc_home_timeline_HomeTimelineResponse'
        '400':
          description: Invalid Input
        '401':
          description: User not authorized
        '403':
          description: Not Allowed
        '404':
          description: User not Found
  /user-timeline/{id}:
    get:
      tags:
      - srvc-user-timeline
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/srvc_user_timeline_UserTimelineResponse'
  /minio/{id}:
    get:
      tags:
      - srvc-media
      summary: Get media object
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Media Object
          content:
            application/octet-stream:
              schema: {}
        '400':
          description: Invalid input
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/srvc_media_SrvcMediaErrorCode'
        '404':
          description: Object Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/srvc_media_SrvcMediaErrorCode'
components:
  schemas:
    repo_social_LocalDateTime:
      format: date-time
      type: string
      example: '2022-03-10T12:15:50'
    repo_social_PostResponse:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        text:
          type: string
        media:
          type: string
        repostId:
          type: string
        replyToPostId:
          type: string
        isReply:
          type: boolean
        createdAt:
          $ref: '#/components/schemas/repo_social_LocalDateTime'
        updatedAt:
          $ref: '#/components/schemas/repo_social_LocalDateTime'
        deleted:
          type: boolean
    repo_social_RepoSocialErrorCode:
      enum:
      - BAD_REQUEST
      - UNAUTHORIZED
      - FORBIDDEN
      - NOT_FOUND
      - ERROR_DURING_CYPHER_EXEC
      - INTERNAL_SERVER_ERROR
      type: string
    repo_social_UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        bio:
          type: string
        profileImage:
          type: string
        createdAt:
          $ref: '#/components/schemas/repo_social_LocalDateTime'
        updatedAt:
          $ref: '#/components/schemas/repo_social_LocalDateTime'
        deleted:
          type: boolean
    repo_user_CreateUserRequest:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
    repo_user_LocalDateTime:
      format: date-time
      type: string
      example: '2022-03-10T12:15:50'
    repo_user_LoginRequest:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    repo_user_ModifyUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        bio:
          type: string
    repo_user_RepoUserErrorCode:
      enum:
      - USER_NOT_FOUND
      - USER_WITH_USERNAME_FOUND
      - USER_WITH_USERNAME_ALREADY_EXISTS
      - USER_ALREADY_EXISTS
      - INVALID_USER_DATA
      - UNAUTHORIZED
      - FORBIDDEN
      - INTERNAL_SERVER_ERROR
      type: string
    repo_user_UploadImageRequest:
      type: object
      properties:
        userId:
          description: User ID
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        file:
          format: binary
          description: User profile image
          type: string
    repo_user_UserEntity:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        bio:
          type: string
        profileImage:
          type: string
        createdAt:
          $ref: '#/components/schemas/repo_user_LocalDateTime'
        updatedAt:
          $ref: '#/components/schemas/repo_user_LocalDateTime'
        deleted:
          type: boolean
    repo_user_UserLoginResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        jwt:
          type: string
    repo_post_AllRepliesResponse:
      type: object
      properties:
        replies:
          type: array
          items:
            $ref: '#/components/schemas/repo_post_PostEntity'
    repo_post_CreatePostRequest:
      type: object
      properties:
        text:
          type: string
        extension:
          type: string
        media:
          format: binary
          description: Media input stream
          type: string
    repo_post_EditPostRequest:
      type: object
      properties:
        text:
          type: string
        extension:
          type: string
        media:
          format: binary
          description: Media input stream
          type: string
    repo_post_LocalDateTime:
      format: date-time
      type: string
      example: '2022-03-10T12:15:50'
    repo_post_PostEntity:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        text:
          type: string
        media:
          type: string
        repostId:
          type: string
        replyToPostId:
          type: string
        isReply:
          type: boolean
        createdAt:
          $ref: '#/components/schemas/repo_post_LocalDateTime'
        updatedAt:
          $ref: '#/components/schemas/repo_post_LocalDateTime'
        deleted:
          type: boolean
    repo_post_PostReplyRequest:
      type: object
      properties:
        text:
          type: string
        extension:
          type: string
        media:
          format: binary
          description: Media input stream
          type: string
    srvc_search_LocalDateTime:
      format: date-time
      type: string
      example: '2022-03-10T12:15:50'
    srvc_search_SearchEntity:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        text:
          type: string
        media:
          type: string
        repostId:
          type: string
        replyToPostId:
          type: string
        isReply:
          type: boolean
        createdAt:
          $ref: '#/components/schemas/srvc_search_LocalDateTime'
        updatedAt:
          $ref: '#/components/schemas/srvc_search_LocalDateTime'
        deleted:
          type: boolean
    srvc_search_SearchRequest:
      type: object
      properties:
        query:
          type: string
    srvc_home_timeline_Date:
      format: date
      type: string
      example: '2022-03-10'
    srvc_home_timeline_HomeTimelineEntity:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/srvc_home_timeline_HomeTimelineEntryEntity'
        followersId:
          type: array
          items:
            type: string
        blockedUsersId:
          type: array
          items:
            type: string
    srvc_home_timeline_HomeTimelineEntryEntity:
      type: object
      properties:
        postId:
          type: string
        authorId:
          type: string
        content:
          type: string
        likedBy:
          type: array
          items:
            $ref: '#/components/schemas/srvc_home_timeline_HomeTimelineLikedByEntity'
        type:
          type: string
        timestamp:
          $ref: '#/components/schemas/srvc_home_timeline_Date'
    srvc_home_timeline_HomeTimelineLikedByEntity:
      type: object
      properties:
        userId:
          type: string
        likedAt:
          $ref: '#/components/schemas/srvc_home_timeline_Date'
    srvc_home_timeline_HomeTimelineResponse:
      type: object
      properties:
        hometimeline:
          $ref: '#/components/schemas/srvc_home_timeline_Date'
    srvc_home_timeline_LocalDateTime:
      format: date-time
      type: string
      example: '2022-03-10T12:15:50'
    srvc_home_timeline_ObjectId:
      type: object
      properties:
        timestamp:
          format: int32
          type: integer
        counter:
          format: int32
          type: integer
        randomValue1:
          format: int32
          type: integer
        randomValue2:
          type: integer
        date:
          $ref: '#/components/schemas/srvc_home_timeline_LocalDateTime'
    srvc_user_timeline_LocalDateTime:
      format: date-time
      type: string
      example: '2022-03-10T12:15:50'
    srvc_user_timeline_UserTimelinePostResponse:
      type: object
      properties:
        id:
          type: string
        postId:
          type: string
        userId:
          type: string
        ownerId:
          type: string
        text:
          type: string
        media:
          type: string
        repostId:
          type: string
        replyToPostId:
          type: string
        isReply:
          type: boolean
        likedAt:
          $ref: '#/components/schemas/srvc_user_timeline_LocalDateTime'
        createdAt:
          $ref: '#/components/schemas/srvc_user_timeline_LocalDateTime'
        updatedAt:
          $ref: '#/components/schemas/srvc_user_timeline_LocalDateTime'
        deleted:
          type: boolean
    srvc_user_timeline_UserTimelineResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/srvc_user_timeline_UserTimelinePostResponse'
    srvc_media_SrvcMediaErrorCode:
      enum:
      - INVALID_MEDIA_ID
      - MEDIA_DOWNLOAD_FAILED
      - INTERNAL_SERVER_ERROR
      type: string
tags:
- name: RepoPost
  description: RepoPost

